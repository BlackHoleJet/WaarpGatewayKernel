<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="57" tokens="301">
<file line="58" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelMysql.java"/>
<file line="51" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		String primaryKey = " PRIMARY KEY ";
		String notNull = " NOT NULL ";

		DbRequest request = new DbRequest(session);
		// TRANSLOG
		String action = createTableH2 + DbTransferLog.table + "(";
		DbTransferLog.Columns[] acolumns = DbTransferLog.Columns.values();
		for (int i = 0; i < acolumns.length; i++) {
			action += acolumns[i].name() +
					DBType.getType(DbTransferLog.dbTypes[i]) + notNull + ", ";
		}
		// Several columns for primary key
		action += " CONSTRAINT TRANSLOG_PK " + primaryKey + "(";
		for (int i = DbTransferLog.NBPRKEY; i > 1; i--) {
			action += acolumns[acolumns.length - i].name() + ",";
		}
		action += acolumns[acolumns.length - 1].name() + "))";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			e.printStackTrace();
			return;
		} finally {
			request.close();
		}
		// Index TRANSLOG
		action = "CREATE INDEX IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		/*
		 * # Table to handle any number of sequences: CREATE TABLE Sequences ( name VARCHAR(22) NOT
		 * NULL, seq INT UNSIGNED NOT NULL, # (or BIGINT) PRIMARY KEY name ); # Create a Sequence:
		 * INSERT INTO Sequences (name, seq) VALUES (?, 0); # Drop a Sequence: DELETE FROM Sequences
		 * WHERE name = ?; # Get a sequence number: UPDATE Sequences SET seq = LAST_INSERT_ID(seq +
		 * 1) WHERE name = ?; $seq = $db->LastInsertId();
		 */
		action = "CREATE TABLE Sequences (name VARCHAR(22) NOT NULL PRIMARY KEY," +
]]>
</codefragment>
</duplication>
<duplication lines="86" tokens="299">
<file line="105" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelH2.java"/>
<file line="101" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
				" START WITH " + (DbConstant.ILLEGALVALUE + 1);
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			e.printStackTrace();
			return;
		} finally {
			request.close();
		}
	}

	/*
	 * (non-Javadoc)
	 * @see org.waarp.openr66.databaseold.model.DbModel#resetSequence()
	 */
	@Override
	public void resetSequence(DbSession session, long newvalue)
			throws WaarpDatabaseNoConnectionException {
		String action = "ALTER SEQUENCE " + DbTransferLog.fieldseq +
				" RESTART WITH " + newvalue;
		DbRequest request = new DbRequest(session);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			e.printStackTrace();
			return;
		} finally {
			request.close();
		}
		System.out.println(action);
	}

	/*
	 * (non-Javadoc)
	 * @see org.waarp.openr66.databaseold.model.DbModel#nextSequence()
	 */
	@Override
	public long nextSequence(DbSession dbSession)
			throws WaarpDatabaseNoConnectionException,
			WaarpDatabaseSqlException, WaarpDatabaseNoDataException {
		long result = DbConstant.ILLEGALVALUE;
		String action = "SELECT NEXTVAL('" + DbTransferLog.fieldseq + "')";
		DbPreparedStatement preparedStatement = new DbPreparedStatement(
				dbSession);
		try {
			preparedStatement.createPrepareStatement(action);
			// Limit the search
			preparedStatement.executeQuery();
			if (preparedStatement.getNext()) {
				try {
					result = preparedStatement.getResultSet().getLong(1);
				} catch (SQLException e) {
					throw new WaarpDatabaseSqlException(e);
				}
				return result;
			} else {
				throw new WaarpDatabaseNoDataException(
						"No sequence found. Must be initialized first");
			}
		} finally {
			preparedStatement.realClose();
		}
	}

	@Override
	public boolean upgradeDb(DbSession session, String version)
			throws WaarpDatabaseNoConnectionException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean needUpgradeDb(DbSession session, String version, boolean tryFix)
			throws WaarpDatabaseNoConnectionException {
		// TODO Auto-generated method stub
		return false;
	}

}
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="168">
<file line="737" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\data\DbTransferLog.java"/>
<file line="772" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\data\DbTransferLog.java"/>
<codefragment>
<![CDATA[
			DbSession session, boolean in)
			throws WaarpDatabaseNoConnectionException, WaarpDatabaseSqlException {
		String request = "SELECT COUNT(" + Columns.SPECIALID.name() + ") FROM " + table;
		String inCond = null;
		if (in) {
			inCond = " (" + Columns.MODETRANS.name() + " = '" + PageRole.DELETE.name()
					+ "' OR " +
					Columns.MODETRANS.name() + " = '" + PageRole.PUT.name() + "' OR " +
					Columns.MODETRANS.name() + " = '" + PageRole.POST.name() + "' OR " +
					Columns.MODETRANS.name() + " = '" + PageRole.POSTUPLOAD.name() + "') ";
		} else {
			inCond = " (" + Columns.MODETRANS.name() + " = '" + PageRole.GETDOWNLOAD.name() + "') ";
		}
		request += " WHERE " + inCond;
		request += " AND " + getLimitWhereCondition() + " ";
		request += " AND " + Columns.STARTTRANS.name() + " >= ? ";
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="138">
<file line="80" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelOracle.java"/>
<file line="76" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
			return;
		} finally {
			request.close();
		}
		// Index TRANSLOG
		action = "CREATE INDEX IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		action = "CREATE SEQUENCE " + DbTransferLog.fieldseq +
				" MINVALUE " + (DbConstant.ILLEGALVALUE + 1) +
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="129">
<file line="59" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelH2.java"/>
<file line="63" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelMysql.java"/>
<file line="56" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		String action = createTableH2 + DbTransferLog.table + "(";
		DbTransferLog.Columns[] acolumns = DbTransferLog.Columns.values();
		for (int i = 0; i < acolumns.length; i++) {
			action += acolumns[i].name() +
					DBType.getType(DbTransferLog.dbTypes[i]) + notNull + ", ";
		}
		// Several columns for primary key
		action += " CONSTRAINT TRANSLOG_PK " + primaryKey + "(";
		for (int i = DbTransferLog.NBPRKEY; i > 1; i--) {
			action += acolumns[acolumns.length - i].name() + ",";
		}
		action += acolumns[acolumns.length - 1].name() + "))";
		System.out.println(action);
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="123">
<file line="83" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelMysql.java"/>
<file line="80" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelOracle.java"/>
<codefragment>
<![CDATA[
			return;
		} finally {
			request.close();
		}
		// Index TRANSLOG
		action = "CREATE INDEX IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		/*
		 * # Table to handle any number of sequences: CREATE TABLE Sequences ( name VARCHAR(22) NOT
		 * NULL, seq INT UNSIGNED NOT NULL, # (or BIGINT) PRIMARY KEY name ); # Create a Sequence:
		 * INSERT INTO Sequences (name, seq) VALUES (?, 0); # Drop a Sequence: DELETE FROM Sequences
		 * WHERE name = ?; # Get a sequence number: UPDATE Sequences SET seq = LAST_INSERT_ID(seq +
		 * 1) WHERE name = ?; $seq = $db->LastInsertId();
		 */
		action = "CREATE TABLE Sequences (name VARCHAR(22) NOT NULL PRIMARY KEY," +
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="120">
<file line="154" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelH2.java"/>
<file line="158" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelOracle.java"/>
<file line="150" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		DbPreparedStatement preparedStatement = new DbPreparedStatement(
				dbSession);
		try {
			preparedStatement.createPrepareStatement(action);
			// Limit the search
			preparedStatement.executeQuery();
			if (preparedStatement.getNext()) {
				try {
					result = preparedStatement.getResultSet().getLong(1);
				} catch (SQLException e) {
					throw new WaarpDatabaseSqlException(e);
				}
				return result;
			} else {
				throw new WaarpDatabaseNoDataException(
						"No sequence found. Must be initialized first");
			}
		} finally {
			preparedStatement.realClose();
		}
	}

	@Override
	public boolean upgradeDb(DbSession session, String version)
			throws WaarpDatabaseNoConnectionException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean needUpgradeDb(DbSession session, String version, boolean tryFix)
			throws WaarpDatabaseNoConnectionException {
		// TODO Auto-generated method stub
		return false;
	}

}
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="110">
<file line="85" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelH2.java"/>
<file line="88" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelMysql.java"/>
<file line="85" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelOracle.java"/>
<file line="81" path="J:\Git\github\waarp-digest\WaarpGatewayKernel\src\main\java\org\waarp\gateway\kernel\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		action = "CREATE INDEX IF NOT EXISTS IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		action = "CREATE SEQUENCE IF NOT EXISTS " + DbTransferLog.fieldseq +
]]>
</codefragment>
</duplication>
</pmd-cpd>